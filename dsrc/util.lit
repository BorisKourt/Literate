@code_type d .d
@comment_type // %s

@title Util

@s Introduction

This file contains some utilities for the rest of the literate program.

It has functions for reading the entire source of a file, and functions
for reporting errors and warnings.

--- util.d
import std.stdio;
import parser;
import std.string;

@{readall function}
@{error function}
@{warning function}
@{realname function}
@{leadingWS function}
@{getCodeblocks function}
---

@s Readall

The `readall` function reads an entire text file, or
reads from stdin until `control-d` is pressed, and returns the string.

--- readall function
// Read from a file
string readall(File file) {
    string src = "";
    while (!file.eof) {
        src ~= file.readln();
    }
    file.close();
    return src;
}

// Read from stdin
string readall() {
    string src = "";
    string line;
    while ((line = readln()) !is null) {
        src ~= line;
    }
    return src;
}
---

@s Error and Warning

These functions simply write errors or warnings to stdout.

--- error function
void error(string file, int line, string message) {
    writeln(file, ":", line, ":error: ", message);
}
---

--- warning function
void warn(string file, int line, string message) {
    writeln(file, ":", line, ":warning: ", message);
}
---

@s Realname function

Sometimes a block name will be `name +=` and here it is useful to strip
off the end `+=` because that is not really part of the block name. This
function does that.

--- realname function
string realname(string name) {
    name = strip(name);
    if (name.endsWith("+=") || name.endsWith(":=")) {
        return strip(name[0..$ - 2]);
    } else {
        return name;
    }
}
---

@s Leading Whitespace function

This function returns the leading whitespace of the input string.

--- leadingWS function
string leadingWS(string str) {
    auto firstChar = str.indexOf(strip(str)[0]);
    return str[0..firstChar];
}
---

`tempCodeblocks` is an array that contains only codeblocks that
have `+=` or `:=`. `rootCodeblocks` and `codeblocks` are both associative arrays
which will hold more important information. `codeblocks` will contain every
codeblock after the `+=` and `:=` transformations have been applied.

Here we go through every single block in the program, and add it to the
`tempCodeblocks` array if it has a `+=` or `:=`. Otherwise, we add it to
the `codeblocks` array, and if it matches the filename regex `.*\.\w+`, we add
it to the `rootCodeblocks` array.

--- getCodeblocks function
void getCodeblocks(Program p, 
                   out Block[string] codeblocks,
                   out Block[string] rootCodeblocks) {
    Block[] tempCodeblocks;

    foreach (c; p.chapters) {
        foreach (s; c.sections) {
            foreach (b; s.blocks) {
                if (b.isCodeblock) {
                    if ((!b.name.endsWith("+=")) && (!b.name.endsWith(":="))) {
                        codeblocks[b.name] = b.dup();
                        if (matchAll(b.name, regex(".*\\.\\w+"))) {
                            rootCodeblocks[b.name] = b.dup();
                        }
                    } else {
                        tempCodeblocks ~= b.dup();
                    }
                }
            }
        }
    }

    // Now we go through every codeblock in tempCodeblocks and apply the += and :=
    foreach (b; tempCodeblocks) {
        if (b.name.endsWith("+=")) {
            auto index = b.name.length - 2;
            string name = strip(b.name[0..index]);
            if ((name in codeblocks) is null) {
                error(p.file, b.startLine, "Trying to add to {" ~ name ~ "} which does not exist");
            } else {
                codeblocks[name].lines ~= b.lines;
            }
        } else if (b.name.endsWith(":=")) {
            auto index = b.name.length - 2;
            string name = strip(b.name[0..index]);
            if ((name in codeblocks) is null) {
                error(p.file, b.startLine, "Trying to redefine {" ~ name ~ "} which does not exist");
            } else {
                codeblocks[name].lines = b.lines;
            }
        }
    }
}
---
