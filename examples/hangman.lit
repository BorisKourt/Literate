@codetype jl

@title Hangman

@p Introduction

The structure of the hangman program will look like this:

--- Root
println("Welcome to hangman!")
@<Setup>
@<Loop start>
@<User input>
@<Check input>
@<Check win>
@<End>
---

@p The Setup

First, we have the computer come up with a secret word which it chooses randomly from a list of words read from a text file.

--- Setup
@<Functions>

words = readlines(open("words.txt"))
secret_word = words[rand(1:length(words))] |> chomp # Use chomp to remove the '\n'
---

Next we initialize the variable to hold the dashes.

--- Setup +=
dashes = Array(Char, length(secret_word))
for i = 1:length(secret_word)
    dashes[i] = '-'
end
---

We should also make a variable which will hold the number of guesses the user has made, and a variable for how many guesses they can make before losing.

--- Setup +=
guesses = 0
max_guesses = 8
---

@p Getting User Input

Now we can start the game.

We ask for the user's guess, and accept one `Char`.

--- User input
printarray(dashes) # Later section
println("You have $(max_guesses - guesses) guesses left")
println("What's your guess? ")
guess = readline(STDIN)[1]
---

@p Checking the User's Guess

We loop through the secret word, checking if any of its letters were guessed. If they were, reveal that letter in the dashes array. If none of the letters in secret word were equal to the guess, then `got_one_correct` will be false, and one guess will be added.

--- Check input
got_one_correct = false
for i = 1:length(secret_word)
    if secret_word[i] == guess
        got_one_correct = true
        dashes[i] = guess
    end
end

if !got_one_correct
    guesses += 1
end
---

@p Checking for Victory

Now we should check if the user has guessed all the letters.

Here we see if there are any dashes left in the array that holds the dashes. If there aren't, the user has won.

--- Check win
if !('-' in dashes)
    println("You win! The word was $secret_word")
    exit()
end
---

@p Pretty Printing the Dashes

We want the dashes to look pretty when they are printed, not look like an array of chars. Instead of `['-', '-', '-', '-']`, we want `----`.

--- Functions
function printarray(arr)
    for element in arr
        print(element)
    end
    println()
end
---

@p Adding the Loop

To make sure that the guessing happens multiple times, we wrap everything in a loop

--- Loop start
while guesses <= max_guesses
---

--- End
end # End the loop

println("You lose. The word was $secret_word")
---
