@codetype Julia jl
@title Common

@s Introduction
This file holds the code that is common to both `tangle` and `weave`. The main objective that this code
accomplishes is to create two dictionaries: `block_locations` and `block_use_locations`. These dictionaries
hold the locations of each block corresponding to its name, and where each block was used.

The types of these dictionaries are `Dict{String, Array{Int, 1}}`.

The overall file will look like this:

--- common.jl
@{Declare global variables}
@{Declare name}
@{Declare get_locations}
---

@s

Here are the global variables that are initialized at the top of the file.

--- Declare global variables
dir = dirname(Base.source_path())   # This variable holds the directory that the common.jl file is in.

block_locations = Dict{String, Array{Int, 1}}()
block_use_locations = Dict{String, Array{Int, 1}}()
---

@s

Next we declare the `get_locations` function which will parse the `.lit` file and find all codeblock locations.

--- Declare get_locations
function get_locations(source)
    lines = readlines(IOBuffer(source))
    sectionnum = 0   # Which section is currently being parsed
    in_codeblock = false   # Whether we are parsing a codeblock or not

    for line_num = 1:length(lines)
        line = lines[line_num] |> chomp # Use chomp to remove the \n
        @{Check if line starts with @s}
        @{Check if a codeblock has been defined}
        @{Check if a codeblock has been used}
    end
end
---

@s

--- Check if line starts with @s
if startswith(line, "@s")
    sectionnum += 1
---

@s

Here we check for the `"---"` which signifies either the beginning or the end of a codeblock. If the `---` is followed
by a title or any sort of text, then it is the beginning of a codeblock, otherwise, it is the end.

--- Check if a codeblock has been defined
elseif startswith(line, "---")
    in_codeblock = true
    if ismatch(line, r"^---$")
        in_codeblock = false
        continue
    end
    @{Get the block name}
    @{Add the locations to the dict}
---

@s

--- Get the block name
block_name = line[4:end] |> strip # Remove the ---

if contains(block_name, "+=")
    plus_index = search(block_name, "+")[end] # Get the index of the "+" (the [end] is to get the last occurrence)
    block_name = block_name[1:plus_index-1] |> strip # Remove the "+=" and strip any whitespace
end
---

@s

--- Add the locations to the dict
if !haskey(block_locations, block_name) # If this block has not been defined in the dict yet
    block_locations[block_name] = [paragraphnum] # Create a new slot for it and add the current paragraph num
elseif !(paragraphnum in block_locations[block_name]) # If the current paragraph num isn't already in the array
    push!(block_locations[block_name], paragraphnum) # Add it
end
---

@s

In this case, we are trying to find in which sections all codeblocks are used. We only check the line if we
are in a codeblock.

The code here looks alot like @{Add the locations to the dict}.

--- Check if a codeblock has been used
elseif in_codeblock && startswith(line, "@{")
    block_name = line[3:end-1] # Substring to just get the block name

    # Pretty much the same as before
    if !haskey(block_use_locations, block_name)
        block_use_locations[block_name] = [paragraphnum]
    elseif !(paragraphnum in block_use_locations[block_name])
        push!(block_use_locations[block_name], paragraphnum)
    end
end
---

@s
We'll also quickly declare a useful function called `name` which returns the just the filename of the argument.
`path/to/somewhere.lit` would return `somewhere`

--- Declare name
function name(path)
    basename(file[1:search(file, '.')[1]-1])
end
---
