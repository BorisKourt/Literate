@codetype Julia jl
@title Tangle

@s Introduction
Tangle is the part of `Literate` which takes a `.lit` file and generates the corresponding code. It must parse the codeblocks,
detect links to other codeblocks, and follow those.

The overall strategy here is to first fill a dictionary with each piece of code, and its corresponding name. Then, we will
write out the code, recursively following and links that are used.

Here's what the structure looks like:

--- tangle.jl
include("common.jl")

@{Define the tangle function}
@{Define the write_code function}
---

@s

--- Define the tangle function
function tangle(inputstream)
    lines = readlines(inputstream)

    codeblocks = Dict{String, String}()
    block_names = String[]
    
    for line_num = 1:length(lines)
        line = lines[line_num] |> chomp
        
        if startswith(line, "---") && !ismatch(r"^---$", line)
            @{Get the block name}
            @{Get the code}
            @{Add the code to the dict}
        end
    end

    @{Write the code}
end
---

@s

--- Get the block name
block_name = line[4:end] |> strip

add_to_block = false # Whether or not this definition has a +=
if contains(block_name, "+=")
    plus_index = search(block_name, "+")[end]
    block_name = block_name[1:plus_index-1] |> strip
    add_to_block = true
end
---

@s

--- Get the code
code = ""
while true
    line = lines[line_num += 1]
    chomp(line) == "---" && break
    code *= line
end
---

@s

--- Add the code to the dict
if add_to_block
    codeblocks[block_name] *= "\n$code"
else
    push!(block_names, block_name)
    codeblocks[block_name] = code
end
---

@s

Now we define the `write_code` function which takes the `block_name`, `codeblocks`, and `outstream` and writes the code,
recursively following links until it is done.

--- Define the write_code function
function write_code(block_name, codeblocks, outstream)
    code = codeblocks[block_name]
    lines = split(code, "\n")

    for line in lines
        if startswith(strip(line), "@{")
            line = strip(line)
            write_code(line[3:end-1], codeblocks, outstream)
        else
            write(outstream, "$line\n")
        end
    end
end
---

@s

Here we check if the name is a file with the regular expression `^.+\w\.\w+$`. If it is, we treat it as our root, and recursively
write all the links that are in that codeblock.

--- Write the code
for name in block_names
    if ismatch(r"^.+\w\.\w+$", basename(name))
        outstream = open("$(strip(name))", "w")
        write_code("$name", codeblocks, outstream)
        close(outstream)
    end
end
---
