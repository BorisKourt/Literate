@codetype Julia jl
@title Tangle

@s Introduction
Tangle is the part of `Literate` which takes a `.lit` file and generates the corresponding code. It must parse the codeblocks,
detect links to other codeblocks, and follow those.

The overall strategy here is to first fill a dictionary with each piece of code, and its corresponding name. Then, we will
write out the code, recursively following and links that are used.

Here's what the structure looks like:

--- tangle.jl
@{Define the tangle function}
@{Define the write_code function}
---

@s

We receive the lines as an argument, and set up some variables to hold the code for each block, and all the block names. Then
we start looping through each line. We use `line_num` because if we report any errors, we want to give the line number of the error.
Then we check if the line is either a codeblock beginning or ending, and if so we add the code for it to the dictionaries.

--- Define the tangle function
function tangle(lines)
    codeblocks = Dict{String, String}()
    block_names = String[]
    
    for line_num = 1:length(lines)
        line = lines[line_num] |> chomp
        
        if startswith(line, "---") && !ismatch(r"^---$", line)
            @{Get the block name}
            @{Get the code}
            @{Add the code to the dict}
        end
    end

    @{Write the code}
end
---

@s

Getting the block name on a normal definition is a matter of removing the `---`. However there may be a `+=` and in that
case we want to strip that off too. We make sure to find the *last* occurrence of a `+=` so that a user could have a `+=`
in the name of the code block. Then we substring it off. We also set a flag `add_to_block` to tell the code later on
that this is not a codeblock definition, but a `+=` definition.

--- Get the block name
block_name = line[4:end] |> strip

add_to_block = false # Whether or not this definition has a +=
if contains(block_name, "+=")
    plus_index = search(block_name, "+")[end]
    block_name = block_name[1:plus_index-1] |> strip
    add_to_block = true
end
---

@s

Now we want to actually get the code for the codeblock. We loop through each line, incrementing `line_num` until we come
across the end of the codeblock (signified by `---`).

--- Get the code
code = ""
while true
    line = lines[line_num += 1]
    chomp(line) == "---" && break
    code *= line
end
---

@s

Finally we add the code to the dictionary in the corresponding slot. If the code was an addition to a previous codeblock
definition, that codeblock must already by defined in the dictionary and we add this code to that index. If not, we
create a new slot for the block name, and assign it to its code.

--- Add the code to the dict
if add_to_block
    codeblocks[block_name] *= "\n$code"
else
    push!(block_names, block_name)
    codeblocks[block_name] = code
end
---

@s

Now we define the `write_code` function which takes the `block_name`, `codeblocks`, and `outstream` and writes the code,
recursively following links until it is done.

--- Define the write_code function
function write_code(block_name, codeblocks, outstream)
    code = codeblocks[block_name]
    lines = split(code, "\n")

    for line in lines
        if startswith(strip(line), "@{")
            line = strip(line)
            write_code(line[3:end-1], codeblocks, outstream)
        else
            write(outstream, "$line\n")
        end
    end
end
---

@s

Here we check if the name is a file with the regular expression `^.+\w\.\w+$`. If it is, we treat it as our root, and recursively
write all the links that are in that codeblock.

--- Write the code
for name in block_names
    if ismatch(r"^.+\w\.\w+$", basename(name))
        outstream = open("$outdir/$(strip(name))", "w")
        write_code("$name", codeblocks, outstream)
        close(outstream)
    end
end
---
